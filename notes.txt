Python Advanced
===============

Toby Dussek
Jan 27-30 2025

You will need:
- Python 3.x
- an editor (e.g. VS Code, PyCharm etc.)
- internet, with permission to install python libraries (e.g. requests library)

Python code lives in classes (or in functions), in modules, which live in packages (folders)

9:30
11:00 break (15 mins)
12:30 lunch (1 hr)
3:00 break (15 minutes)
4:30 end

course website:
     https://s3.eu-west-1.amazonaws.com/neueda.conygre.com/Sites/Ericsson_Advanced_Python/site/index.html
Repo https://github.com/onionmccabbage/pythonAdvJan2025

Monday
> intro and welcome
  - what do you currently know
  - what do you want to know 
> abstract and concrete classes
> class inheritance
> using slots
> name mangled members
> property decorators
> validate data types: isinstance, type, int(float())
> override built-in methods: __eq__, __repr__
> if __name__== '__main__'
> typings can be useful during development (but NEVER at runtime)
- after lunch review
- functional programming: map, filter and reduce  
- function parameters


Tuesday
- Loading local and remote data (requests)
- we will be using the 'requests' library for API calls
- processing text/json
- persisting files: read/write/append/exclusive/overwrite, text, bytes, json
- 'with' operator for clean handling of assets
- how to convert bytes back to string b'this is bytes'.decode()
- databases
    see https://wiki.python.org/moin/DatabaseProgramming
  also useful: add 'sqlite viewer' plugin to VSCode
- other db connections
- Create, Read and Update (and Delete) - CRUD operations
- populate db with sample data
- read and nicely format values from the db
- after lunch review exercise
- comprehensions, generators and yield

Wednesday
- decorator syntax
- redirect stdout
- context manager to switch context e.g. for handling data input and output
- networking server/client (microservices)
- immediate mode Python
  - any results are immediately show using __repr__ 
- Testing: (only really works if there is a good spec')
  - doctest revisited
  see https://docs.python.org/3/library/doctest.html
  - unittest
  - pytest see https://docs.pytest.org/
- after lunch lab exercise

Thursday
- profiling: timings etc. (cprofile)
- multithreading, also limits of mutlithreading concurrency
  - how threads are done
  - concurrency and resources (lock shared resources)
  - async await
  in Python we do not get true parallelism ...
- the global Interpreter Lock (GIL) will affect threading performance
  the classic cpython will be stymied by the GIL
  jython (implements python 2) (Java) an ironpython (.NET) are NOT limited in this way
  ipython is interactive python (often seen in Jupyter etc.)
- which Python... NB 3.13 contains an optional GIL (cpython)
  see https://peps.python.org/pep-0703/
- using thread locks
- Python has -O to optimize code (especially useful for threading and large code-base)
  -O will attempt to optimize the code especially good for threading
- after lunch review
- async server and client for microservices









- end of course feedbacks (internal)

Other Useful Resources
- https://pynative.com/python-exercises-with-solutions/
- https://realpython.com/
- moving from Py2 to Py3 https://docs.python.org/3/howto/pyporting.html